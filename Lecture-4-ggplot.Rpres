Lecture4-ggplot
========================================================
author: 
date: 
width: 1000
height: 1400
Tidy data
========================================================

#### *Happy families are all alike; every unhappy family is unhappy in its own way  Leo Tolstoy*
##### *Like families, tidy datasets are all alike but every messy dataset is messy in its own way. - Hadley Wickham*


[Packages for data tidying](https://trends.google.com/trends/explore?date=2012-01-01%202016-06-30&q=tidyr,reshape2)

*This practical session uses Hadley Wickhams package tidyr, vignette can be found here: https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html. If you want to use reshape2, you can find well explained differences and analogous functions here:  https://www.r-bloggers.com/how-to-reshape-data-in-r-tidyr-vs-reshape2/ *

Tidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types. In tidy data:

1. Each variable forms a column.

2. Each observation forms a row.

3. Each type of observational unit forms a table.

Messy data example
========================================================
The following table is a result of metagenomic experiment. 142 subjects were asked to pick up any material from the environment and bring them to the sequencing facility.  Every subject also provided their weight, height, age, gender and continent they live in - for researchers to check for possible biases. Scientists sequenced metagenomic communities from material and wrote the results in the table "messyData". They found in total 92 different organisms - OTU80 .. OTU92 and wrote how many sequences were found in each sample. 

```{r}
library(tidyr)
messyData <- read.table("http://hex.bioinfo.hr/~mfabijanic/messyData.txt")
head(messyData,2)
```

Messy data example
========================================================
```

1. Each variable forms a column.

2. Each observation forms a row.

3. Each type of observational unit forms a table.

```
What is wrong with this data ?  
```{r}
library(tidyr)
messyData <- read.table("http://hex.bioinfo.hr/~mfabijanic/messyData.txt")
head(messyData,2)
```



Messy data example
========================================================
```

1. Each variable forms a column.

2. Each observation forms a row.

3. Each type of observational unit forms a table.

```

After making this table, most of the researchers didn't know what to do with it, did some other things, got their PhDs and got fired from their institutions. 

Lets try to tidy the data.
What are the problems?

1. OTU 
2. Subject
3. Weight/height

Cleaning up messy data
========================================================
```{r}
head(messyData,2)
```

Lets deal with weight/height first since each column should represent a single variable.
```{r}
lessMessyData <- spread(messyData, Attribute, Value)
head(lessMessyData, 2)
```

Cleaning up messy data
========================================================
```{r}
head(lessMessyData,2)
```

Each column should represents a variable and each row should represent an observation. Lets first fix the OTUs.
```{r}
longFormat <- gather(lessMessyData, OTU, Count, OTU80:OTU91 )
#?gather
head(longFormat)

```

Cleaning up messy data
========================================================
```{r}
head(longFormat)
```

Column Subject contains 2 variables. separate() makes it easy to split a compound variables into individual variables. You can either pass it a regular expression to split on (the default is to split on non-alphanumeric columns), or a vector of character positions. In this case we want to split after the first character:
```{r}
tidy <- separate(longFormat,"Subject",sep="_",c("Gender","Age","Continent"))
head(tidy)
```

Tidy data
========================================================

**Tidy data makes it analysis easier to do, faster to check, easier to plot and to reuse for other analysis. If you have a messy data set and you think that it is exactly what you need, you will most likely use it only once -for one analysis and a single graph.**  
```

1. Each variable forms a column.

2. Each observation forms a row.

3. Each type of observational unit forms a table.

```

```{r}
head(tidy)
```


Graphs in R
========================================================

Variable types:  
- categorical :  

        nominal  
        ordinal    
- quantitative :  

        numerical discrete  
        numerical continuous  

Graphs in R
========================================================

Variable types:  
- categorical :  

        nominal  
        ordinal    
- quantitative :  

        numerical discrete  
        numerical continuous  
```{r}
head(tidy)

```

***
Cathegorical variables example:  
```{r, echo=FALSE}
library(ggplot2)
ggplot(tidy, aes(Continent))+geom_bar()+theme_light()
```


Graphs in R
========================================================

Variable types:  
- categorical :  

        nominal  
        ordinal    
- quantitative :  

        numerical discrete  
        numerical continuous  
```{r}
head(tidy)

```

***
Quantitative variables example:

```{r, echo=FALSE}
ggplot(tidy, aes(Height))+geom_area(stat="bin")+theme_light()
ggplot(tidy, aes(Height))+geom_density()+theme_light()
```

Graphs in R
========================================================

Graphs with two variables:
    Continuous X, Continuous Y
```{r}
head(tidy)

```
    
***
Scatterplot: 
```{r, echo=FALSE}
ggplot(tidy, aes(Height, Weight))+geom_point()+theme_light()
```
Graphs in R
========================================================

Graphs with two variables:
    Discrete X, Continuous Y
```{r}
head(tidy)
```
    
***
Boxplot: 
```{r, echo=FALSE}
ggplot(tidy, aes(Gender, Height))+geom_boxplot()+theme_light()
```
Violin plot: 
```{r, echo=FALSE}
ggplot(tidy, aes(Gender, Height))+geom_violin()+theme_light()
```
Graphs in R
========================================================

Graphs with two variables:
    Discrete X, Continuous Y
```{r}
head(tidy)
```
    
***
Barplot: 
```{r, echo=FALSE}
ggplot(tidy, aes(Gender, Height))+geom_bar(stat="identity")+theme_light()
ggplot(tidy, aes(Gender, Height, fill=Continent))+geom_bar(stat="identity")+theme_light()
```

ggplot2 VS base R plots
========================================================
```{r, echo=FALSE}
plot(iris$Sepal.Length, iris$Petal.Length, col=iris$Species)
```
***
```{r, echo=FALSE}
ggplot(iris, aes(Sepal.Length, Petal.Length, color=Species)) + 
    geom_point()+theme_light()
```


ggplot2 
========================================================

There are different types of plots and they are used based on different data that we want to show. We will use ggplot2 package to draw graphs in R for the following reasons:

+ Elegant

+ Highly customisable

+ Uniform

+ Natural

+ Expressive

+ Popular

- Steep learning curve

- Slow

- Evolving pretty fast (too fast?)



Basic ggplot logic: ggplot(data, aes(x,y))
========================================================
The ggplot() object acts as a storage facility for the data. It is here where we define the data frame that houses the x and y coordinate values themselves and instructions on how to split the data. There are three ways to initialise a ggplot() object:

```
p <- ggplot()
p <- ggplot(data_frame)
p <- ggplot(data_frame, aes(x, y ))
```
Displaying the object p generated in the code chunk above would result in Error: No layers in plot. This is because you always need at least one layer for a ggplot.



Mapping aesthetics to data
========================================================

The aes() aesthetic mapping function lives inside a ggplot object and is where we specify the set of plot attributes that remain constant throughout the subsequent layers (unless overwritten more on this later).  

We can consider the relationship between the aes() and geoms components as follows:  

The aes() function is the how data is stored, how data is split  
geoms is the what the data looks like. These are geometrical objects stored in subsequent layers.  

Layers  
========================================================

We use the + operator to construct. By appending layers we can connect the "how" (aesthetics) to the "what" (geometric objects). Adding geometric, scale, facet and statistic layers to a ggplot() object is how to control virtually every visual aspect of the plot from the data contained in the object.

### Adding a geometric object layer

A geometric object is used to define the style of the plot. Common geometric objects include:

geom_point() which is used to draw a dot plot
geom_line() used to draw a line plot
geom_bar() used to draw a bar chart.

### Facets

Appending a facet layer to a ggplot generates the same plot for different subsets of data. 
### Statistics

Exploratory data analysis can be done using the base packages in R, the results of which can be added to a ggplot() in the guise of a geom layer.

Example : Basic layout
========================================================

x axis is categorical, y axis is numerical

1. Set the basic layout:
Fill the empty spaces with correct terms so you get a layout in which we use dataset iris, and we want x axis to represent Species and y to represent Petal.Length .

```{r, eval=FALSE}
p <- ggplot( , aes( ,  ))
p
```

What does p look like?  

Example : Basic Layout - solved
========================================================

x axis is categorical, y axis is numerical

1. Set the basic layout:
Fill the empty spaces with correct terms so you get a layout in which we use dataset iris, and we want x axis to represent Species and y to represent Petal.Length .

```{r}
p <- ggplot( iris, aes( Species, Petal.Length ))
```
What does p look like?  
```{r}
p
```

Example : add a layer - graph type
========================================================

2. Choose graph type that you want to show.. Lets say we want a scatterplot for petal length for each group. Add geom_point() to your layout. 
```{r, eval=FALSE}
p + ???
     
```

Example : add a layer - graph type - solved
========================================================

2. Choose graph type that you want to show.. Lets say we want a scatterplot for petal length for each group. Add geom_point() to your layout. 

```{r}
p + geom_point()
     
```

Example : add another layer 
========================================================
3. Color the points by iris$Petal.Length. - Do this inside geom_point.
4. We wanted a scatterplot but changed out mind and now we also want boxplot on top of this scatterplot. Add + geom_boxplot() to previous line to see what you get.

```{r, eval=FALSE}
p +
    geom_point(???) +
    ??? 
     
```
 

Example : add another layer - solved
========================================================
3. We wanted a scatterplot but changed out mind and now we also want boxplot on top of this scatterplot. Add + geom_boxplot() to previous line to see what you get.

```{r}
p +
    geom_point() +
    geom_boxplot()
     
```
 


Example 2: Lets build another graph!
========================================================
x axis is numerical, y axis is numerical

1. Set the basic layout: We want to see if there is any connection between Petal.Length (x axis) and Sepal.Length (y) in iris dataset. 

```{r, eval=FALSE}
p2 <- ggplot(iris, aes(???, ???))
p2
```

2. We would like to add points to the graph. Use geom_point()
```{r,eval=FALSE}
p2 + ???

```

3. We don't really like the graph that much. From it we can't conclude if dependencies are species related or now.. It would looks better if points could be colored by Species. But for this we need to change the aestethics and do everything again bacause we set aestethics in the first step... no worries, just reset the aestethics inside of geom_point() function by aes(color=Species)

```{r, eval=FALSE}
p3<-p2 + geom_point(???)
p3
```



Example 2: Lets build another graph! -SOLVED
========================================================
x axis is numerical, y axis is numerical

Set the basic layout: We want to see if there is any connection between Petal.Length and Sepal.Length in iris dataset. 

```{r}
p2 <- ggplot(iris, aes(Petal.Length, Sepal.Length))
p2
```

Example 2: Lets build another graph! -SOLVED
========================================================
We would like to add points to the graph. Use geom_point()
```{r}
p2 + geom_point()

```

Example 2: Lets build another graph! -SOLVED
========================================================
We don't really like the graph that much. From it we can't conclude if dependencies are species related or now.. It would looks better if points could be colored by Species. But for this we need to change the aestethics and do everything again bacause we set aestethics in the first step... no worries, just reset the aestethics inside of geom_point() function by aes(color=Species)

```{r}
p3<-p2 + geom_point(aes(color=Species))
p3
```

Example 2: do some magic!
========================================================
```{r}
p3 + geom_smooth()

```

***
Put some linear regression line through the points!  
```{r}
p3 + geom_smooth( method="lm")

```

Example 2: do some magic!
========================================================
It looks to us now that if we put linear regression lines through each group of points, maybe lines would be the same for blue and green points! Lets check this by adding geom_smooth() to plot. Again you might need to set the aestethics for geom_smooth also, but this time we want to group it by species, not color by species.

```{r, eval=FALSE}
p4 <- p3 + ???
p4
```


Example 2: do some magic! - solved
========================================================
It looks to us now that if we put linear regression lines through each group of points, maybe lines would be the same for blue and green points! Lets check this by adding geom_smooth() to plot. Again you might need to set the aestethics for geom_smooth also, but this time we want to group it by species, not color by species.

```{r}
p4 <- p3 + geom_smooth(aes(group=Species), method="lm")
p4
```

Example 2: do some more magic!
========================================================

This looks ok but now we would like for each group to appear in its own graph. For this use facet_wrap(). Parameter to facet_wrap is variable by which you would want to separate the graphs (~variable2). If you put ~variable2, then the graph will be separated into as many columns as there are levels in variable2. Lets separate it to columns by Species variable.
```{r, eval=FALSE}
p4 + ???
     
```

Example 2: do some more magic! - solved
========================================================

This looks ok but now we would like for each group to appear in its own graph. For this use facet_wrap(). Parameter to facet_wrap is variable by which you would want to separate the graphs (~variable2). If you put ~variable2, then the graph will be separated into as many columns as there are levels in variable2. Lets separate it to columns by Species variable.
```{r, eval=FALSE}
p4 + facet_wrap(~Species)
     
```

Example 2: do some more magic again! - solved
========================================================
Hmm.. graph looks kind of funny.. It is because x and y axis are automatically chosen to be the same everywhere (how smart!). but in this picture, you don't want that because each group occupies their own part and it just might look better if x axis was "free". No problem, just add  scales="free_x" as a parameter to facet_wrap.
```{r, eval=FALSE}
p4 + facet_wrap(~Species, ???)

```

Example 2: do some more magic again! - solved
========================================================
Hmm.. graph looks kind of funny.. It is because x and y axis are automatically chosen to be the same everywhere (how smart!). but in this picture, you don't want that because each group occupies their own part and it just might look better if x axis was "free". No problem, just add  scales="free_x" as a parameter to facet_wrap.
```{r}
p4 + facet_wrap(~Species, scales="free_x")

```


Example 3: back to basics - FILL
========================================================

```{r}
set.seed(200)
smallIris <- iris[sample(1:150,20),]
smallIris$Flower <- rep(c("Female","Male"),c(15,5))
```
***
```{r}
ggplot(smallIris, aes(Flower))+
    geom_bar()

```

Example 3: back to basics - FILL
========================================================

```{r}
ggplot(smallIris, aes(Flower, fill=Species))+
    geom_bar()
```
***
```{r}
ggplot(smallIris, aes(Flower,fill=Species))+
    geom_bar(position="fill")+
    xlab("X label") + 
    ylab("Y label") + 
    theme_light()

```

Exercise: Recreate the following plot
========================================================
```{r}
library(data.table)
df <- fread("http://hex.bioinfo.hr/~mfabijanic/results.txt")
df$recommend<-factor(df$recommendation, levels = rev(c("Strongly yes","Yes", "Have no opinion on that","No", "Strongly no")))
```
Hint:               scale_x_discrete(limits=levels(SOMEFACTOR))
will show all levels in SOMEFACTOR even if they are empty!

```{r, echo=FALSE}

Recommendation <- ggplot(df, aes(recommend, fill=recommend))+
    geom_bar(colour="black")+          
#    scale_fill_manual("",values=rev(c("#1a9641", "#a6d96a", "#ffffbf", "#fdae61","#d7191c")), drop=FALSE)+
    ylab("Number of people")+xlab("Will you recommend #NGSchool to your friends and colleagues?")+
    theme_light()+
#    theme(legend.position="none", axis.title=element_text(size=10,face="bold"), axis.text = element_text(size=6))+ 
              scale_x_discrete(limits=levels(df$recommend))
#    ylim(0,18)
Recommendation
```

Exercise: Recreate the following plot - solved
========================================================
```{r}
library(data.table)
df <- fread("http://hex.bioinfo.hr/~mfabijanic/results.txt")
df$recommend<-factor(df$recommendation, levels = rev(c("Strongly yes","Yes", "Have no opinion on that","No", "Strongly no")))
```
Hint:               scale_x_discrete(limits=levels(SOMEFACTOR))
will show all levels in SOMEFACTOR even if they are empty!

```{r, echo=FALSE}

Recommendation <- ggplot(df, aes(recommend, fill=recommend))+
    geom_bar(colour="black")+          
    ylab("Number of people")+xlab("Will you recommend #NGSchool to your friends and colleagues?")+
    theme_light()+
              scale_x_discrete(limits=levels(df$recommend))
Recommendation
```


Exercise: Make it better
========================================================
```{r}
library(data.table)
df <- fread("http://hex.bioinfo.hr/~mfabijanic/results.txt")
df$recommend<-factor(df$recommendation, levels = rev(c("Strongly yes","Yes", "Have no opinion on that","No", "Strongly no")))
```
Hint:               scale_x_discrete(limits=levels(SOMEFACTOR))
will show all levels in SOMEFACTOR even if they are empty!

```{r, echo=FALSE}

Recommendation <- ggplot(df, aes(recommend, fill=recommend))+
    geom_bar(colour="black")+          
    scale_fill_manual("",values=rev(c("#1a9641", "#a6d96a", "#ffffbf", "#fdae61","#d7191c")), drop=FALSE)+
    ylab("Number of people")+xlab("Will you recommend #NGSchool to your friends and colleagues?")+
    theme_light()+
    theme(legend.position="none", axis.title=element_text(size=10,face="bold"), axis.text = element_text(size=6))+ 
              scale_x_discrete(limits=levels(df$recommend))
    ylim(0,18)
Recommendation
```

Exercise: Recreate the following plot
========================================================
```{r}
works <- fread("http://hex.bioinfo.hr/~mfabijanic/works.txt")
works$Grade<-factor(works$Grade, levels = rev(c("Excellent","Good", "Average","Below average", "Extremely bad","Skipped the session")))

```
Hint: Jitter the points!
```{r, echo=FALSE}

ggplot(works, aes(x=Lecturer, group=Lecturer, y=Grade))+
     geom_violin()+geom_jitter(width = 0.2, height = 0.2,aes(color=Gender))+
     theme(axis.text.x = element_text(angle=90))

```

Exercise: Recreate the following plot - solved
========================================================
```{r}
works <- fread("http://hex.bioinfo.hr/~mfabijanic/works.txt")
works$Grade<-factor(works$Grade, levels = rev(c("Excellent","Good", "Average","Below average", "Extremely bad","Skipped the session")))

```
Hint: Jitter the points!
```{r}

plot2 <- ggplot(works, aes(x=Lecturer, group=Lecturer, y=Grade))+
     geom_violin()+geom_jitter(width = 0.2, height = 0.2,aes(color=Gender))+
     theme(axis.text.x = element_text(angle=90))
plot2
```

Final magic 
========================================================
```{r}

plot2 <- ggplot(works, aes(x=Lecturer, group=Lecturer, y=Grade))+
     geom_violin()+geom_jitter(width = 0.2, height = 0.2,aes(color=Gender))+
     theme(axis.text.x = element_text(angle=90))
plot2
```

```{r, eval=FALSE}
library(plotly)
ggplotly(plot2)
```

